# -*- coding: utf-8 -*-
"""resnet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16pLDZaAXQpge9Wqiu85cVN8YInzsDb_W
"""

import pandas as pd
from PIL import Image
from torchvision import transforms
import torch
import torchvision.models as models
from PIL import Image

# load pre-trained ResNet model
resnet = models.resnet50(pretrained=True)

# set model to evaluation mode
resnet.eval()

# Define the device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Move the model to the device
resnet.to(device)

import os

# Specify the path to the folder containing the images
folder_path = '/content/drive/MyDrive/Dogs'

# Use os.listdir() to get a list of all file names in the folder
image_list = os.listdir(folder_path)

preprocess = transforms.Compose([
transforms.Resize(256),
transforms.CenterCrop(224),
transforms.ToTensor(),
transforms.Normalize(
mean=[0.485, 0.456, 0.406],
std=[0.229, 0.224, 0.225]
)])

with open("/content/Dogs.txt") as f:
    classes = [line.strip() for line in f.readlines()]

df = pd.DataFrame(columns=["image_name", "predicted_class"])

for image_name in image_list:
    # Open the image
    image_folder = "/content/drive/MyDrive/Dogs"
    image_path = os.path.join(image_folder, image_name)
    img = Image.open(image_path)
    # Preprocess the image
    img_tensor = preprocess(img).unsqueeze(0)
    # Pass the image through the model
    output = resnet(img_tensor)
    # Get the predicted class index
    _, pred = torch.max(output, 1)
    prediction_name=classes[pred]
    df = df.append({"image_name":image_name,"predicted_class":prediction_name}, ignore_index=True)

df.shape

# Save the DataFrame to a CSV file
df.to_csv("predictions.csv")

predi=pd.read_csv("/content/predictions.csv")
predi.head()

